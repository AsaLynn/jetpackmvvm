plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
    id 'kotlin-android-extensions'
    id 'com.github.dcendents.android-maven'
    id 'com.jfrog.bintray'
//    id 'kotlin-kapt'
}

version = "1.0.0"
android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [AROUTER_MODULE_NAME: project.getName()]
//            }
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

//kapt {
//    arguments {
//        arg("AROUTER_MODULE_NAME", project.getName())
//    }
//}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'

    api 'androidx.lifecycle:lifecycle-runtime-ktx:2.2.0'
    api 'androidx.lifecycle:lifecycle-common-java8:2.2.0'
    api 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    api 'com.gyf.immersionbar:immersionbar:3.0.0'
    api 'com.gyf.immersionbar:immersionbar-components:3.0.0'
    api 'com.gyf.immersionbar:immersionbar-ktx:3.0.0'
    api 'com.zxn.utils:common-utils:+'
    api 'com.google.code.gson:gson:2.8.6'
    implementation "androidx.core:core-ktx:+"

//    api 'com.alibaba:arouter-api:1.5.0'
//    kapt 'com.alibaba:arouter-compiler:1.2.2'

}

def siteUrl = 'https://github.com/zhang721688/MVVMDemo'
def gitUrl = 'https://github.com/zhang721688/MVVMDemo.git'
def libName = "jetpackmvvm"
group = "com.zxn.mvvm"
install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'desc content'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'zxn'
                        name 'ZhangXiaoNing'
                        email 'zxn13716071676@sina.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task generateSourcesJar(type: Jar) {
    group = 'jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    //outputFormat = 'javadoc'
    outputFormat = 'html'
    outputDirectory = javadoc.destinationDir
}

task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives generateJavadoc
    archives generateSourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "MVVMDemo"
        name = libName
        desc = 'desc content'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}
repositories {
    mavenCentral()
}